#!/bin/bash

###########################################################################
# Network Switching Script
#
# This Bash script allows you to easily switch between a wired (Ethernet)
# and a wireless (Wi-Fi) network connection. It checks the current network
# connection state and, based on that, either connects or disconnects from
# a wired network and connects to a specified wireless network (if available)
# or disconnects from the wireless network and reconnects to the wired network.
#
# Usage:
# 1. Ensure you are running this script as the root user or with appropriate
#    permissions.
# 2. Customize the script by setting the correct network interface names
#    for the wired and wireless connections (if_cable and if_wifi).
# 3. Set the desired Wi-Fi network SSID in the 'ssid' variable.
# 4. Run the script. On the first run, it will switch from a wired to a
#    specified wireless network. On subsequent runs, it will reverse the
#    operation, switching from the wireless network to the wired connection.
#
# Important Notes:
# - Make sure you have NetworkManager (nmcli) installed and configured on your
#   system, as this script relies on it for managing network connections.
#
# Disclaimer:
# This script is provided as-is, without any warranties or guarantees. Use
# it at your own risk. The author is not responsible for any network or system
# issues that may arise from the use of this script.
#
# Author: Micha≈Ç Kadlof
# Repository: [GitHub Repository URL]
#
###########################################################################


# Check if run as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root." 
   exit 1
fi

# Your interfaces sieciowego (np. eth0, wlan0), check with command: ip --brief a
if_cable=""
if_wifi=""

# Name of your network
ssid=""

# Check if you are connected to cable network
if nmcli device status | grep "${if_cable}" | grep -q " connected" ; then
    # Check WiFi availibility
    if nmcli device wifi list | grep -q "${ssid}"; then
        nmcli device disconnect "${if_cable}"
        nmcli device wifi connect "${ssid}"
    else
        echo "Network \"${ssid}\" not found."
        exit 1
    fi
else
    # If there is no cable netwotk then disconnect wifi, and connect with cable
    if nmcli device status | grep "${if_wifi}" | grep -q "${ssid}" ; then
        nmcli device disconnect ${if_wifi}
        nmcli device connect "${if_cable}"
    fi
fi

